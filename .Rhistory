tapply(data$Comedy, clusterGroups, mean)
tapply(data$Crime, clusterGroups, mean)
tapply(data$Horror, clusterGroups, mean)
tapply(data$Documentary, clusterGroups, mean)
tapply(data$Drama, clusterGroups, mean)
71/144
295/533
0.5534709^2
0.30633/533
sqrt(0.000574728)
71/144
224/389
0.4930556*0.5758355
0.2839189/533
sqrt(0.0005326809)
0.4930556*(1-0.4930556)
0.2499518/144
0.5758355*(1-0.5758355)
0.244249/389
sqrt( 0.001735776+0.0006278895)
4/26
0.1538462*24
7*24/50
0.3*0.7
sqrt(0.21/50)
source("http://bit.ly/dasi_inference")
sumary(inference)
summary(inference)
inference
str(inference)
load(url("http://www.openintro.org/stat/data/atheism.RData"))
head(atheism)
us12 <- subset(atheism, nationality == "United States" && year == 2012)
us12 <- subset(atheism, atheism$nationality == "United States" && atheism$year == 2012)
us12 <- subset(atheism, atheism$nationality == "United States" & atheism$year == 2012)
sum(us12$response == "atheist")
50/1002
inference(us12$response, est = "proportion", type = "ci", method = "theoretical", success = "atheist")
0.34/0.09
load(url("http://www.openintro.org/stat/data/mlb11.RData"))
summary(mlb11)
plot(mlb11$runs, mlb11$at_bats)
model <- lm(runs ~ homeruns, mlb11)
summary(model)
m1 <- lm(runs ~ at_bats, data = mlb11)
plot(m1$residuals ~ mlb11$at_bats)
model <- lm(runs ~ ., mlb11)
summary(model)
model <- lm(runs ~ at_bats + hits + hits + wins + bat_avg, mlb11)
summary(model)
model <- lm(runs ~ new_obs + new_slug = new_onbase, mlb11)
model <- lm(runs ~ new_obs + new_slug + new_onbase, mlb11)
summary(model)
summary(lm(runs ~ wins, mlb11))
summary(lm(runs ~ hits, mlb11))
summary(lm(runs ~ bat_avg, mlb11))
model <- lm(runs ~ at_bats + hits + wins + bat_avg, mlb11)
summary(del)
summary(model)
load(url("http://www.openintro.org/stat/data/evals.RData"))
summary(eval)
summary(evals)
sum(evals$score <3)
plot(evals$score ~ evals$bty_avg)
plot(evals$bty_avg ~ evals$bty_f1lower)
cor(evals$bty_avg, evals$bty_f1lower)
plot(evals[,13:19])
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
multiLines(m_bty_gen)
m_bty_rank <- lm(score ~ bty_avg + rank, evals)
summary(m_bty_rank)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg, data = evals)
summary(m_full)
load(url("http://d396qusza40orc.cloudfront.net/statistics/project/gss.Rdata"))
data1=plot(gss$news,gss$jobpromo)
summary(data1)
summary(gss)
str(gss)
head(gss$jobpromo)
1-0.9^15
1-0.9^15-(1-0.9^15)
1-(0.9^15+0.1*0.9^14+0.1^2*0.9^13)
0.9^15
0.9^14
0.9^14*0.1
0.9^13
0.9^13*0.1^
2
sum(dbinom(3:15, 15, 0.1))
dbinom(3:15, 15, 0.1)
0.9^12 * 0.1^3
choose(0, 15)
choose(15, 0)
choose(15, 1)
choose(1,15)
choose(15, 2)
0.9^15+15*0.1*0.9^14+105*0.1^2*0.9^13
1-(0.9^15+15*0.1*0.9^14+105*0.1^2*0.9^13)
0.33*0.5/dbinom(1,5,0.2)
dbinom(1,5,0.2)*0.5/0.33
0.33*0.5/dbinom(1:5,5,0.2)
0.33*0.5/sum(dbinom(1:5,5,0.2))
dbinom(1,5,0.1)*0.5/(dbinom(1,5,0.1)*0.5+dbinom(1,5,0.2)*0.5)
dbinom(1,5,0.2)*0.5/(dbinom(1,5,0.2)*0.5+dbinom(1,5,0.1)*0.5)
dbinom(1,15,0.1)*0.5
dbinom(1,15,0.1)*0.5+dbinom(1,15,0.2)*0.5
dbinom(1,15,0.1)*0.5/( dbinom(1,15,0.1)*0.5+dbinom(1,15,0.2)*0.5)
dbinom(1,15,0.2)*0.5
dbinom(1,15,0.2)*0.5/( dbinom(1,15,0.1)*0.5+dbinom(1,15,0.2)*0.5)
( dbinom(1,15,0.1)*0.5+dbinom(1,15,0.2)*0.5)
dbinom(2,10,0.1)*0.5/( dbinom(2,10,0.1)*0.5+dbinom(2,10,0.2)*0.5)
dbinom(2,10,0.1)*0.5
dbinom(2,10,0.1)
dbinom(3,15,0.1)*0.5
dbinom(3,15,0.1)*0.5+dbinom(3,15,0.2)*0.5
dbinom(3,15,0.1)*0.5/( dbinom(3,15,0.1)*0.5+dbinom(3,15,0.2)*0.5)
dbinom(3,15,0.2)*0.5
dbinom(3,15,0.2)*0.5/( dbinom(3,15,0.1)*0.5+dbinom(3,15,0.2)*0.5)
617*150+16*238
1-0.88^4
4-2.65
4-6.48
4-6.13
4-0.86
3.5-6.13
3.5-0.86
3.5-6.48
3.5-2.65
491/22
88/22
22/491
0.04480652*88
491/88
88/491
0.17*22
579/46
46/625
(46/625)*112
0.05*0.07
0.05*0.07*0.05
(0.05*0.07*0.05)/(0.93*0.05+0.03*0.95)
(0.93*0.05)/(0.93*0.05+0.03*0.95)
22.166666666666-22.75
1382544.334-1444044.334
61500/5000
1382544.334-1457237.883
74693.334/6000
1382544.334- 1431468,825
1382544.334- 1431468.825
1382544.334- 1333619.844
3136.50*0.021
a <- c(128, 256, 512, 1024, 2048, 4096, 8192, 163848, 32768, 65536)
b <- (0, 0.002, 0.011, 0.063, 0.377, 2.212, 13.22, 76.408, 452.671, 2659.416)
b <- (0.00, 0.002, 0.011, 0.063, 0.377, 2.212, 13.22, 76.408, 452.671, 2659.416)
b <- c(0.00, 0.002, 0.011, 0.063, 0.377, 2.212, 13.22, 76.408, 452.671, 2659.416)
??log
log(b, a)
log(a, b)
b <- c(0.00001, 0.002, 0.011, 0.063, 0.377, 2.212, 13.22, 76.408, 452.671, 2659.416)
log(b, a)
mean(log(b, a))
a^-0.2700942
mean(log(a, b))
a^0.6822778
b/a^0.6822778
??log
log(b, base = a)
y <- log(b, base = a)
a^y
a^mean(y)
mean(y)
n <- c(1, 2, 3)
log(n)
n*log(n)
n*n*log(n)
n^(5/2)
n^(3/2)
a <- c(32, 64, 128, 256, 512, 1024, 2048, 4096)
b <- c(0.00001, 0.002, 0.021, 0.275, 3.219, 39.102, 459.806, 5773.677)
a/b
log(a/b, 2)
log(a/b)
log(b, a)
log(2, a/b)
log(a, b)
512^2.46
5.5^2.46
512^2.56
512^2.56*0.011
log(1)
log(2)
log(3)
log(2)*4
log(3)*9
375/2
375/2/2
375/2/2/2
375/2/2/2/2
375/2/2/2/2/2
375/2/2/2/2/2/2
375/2/2/2/2/2/2/2
375/2/2/2/2/2/2/2/2
375/2/2/2/2/2/2/2/2/2
n <- c( 1,2,3,4,5)
n^(3/2)
n^(5/2)
n^(2)* log(n)
n* log(n)
log(n)
16+32+8+32+56+24
168/8
0.011/0.002
log(0.011/0.002)
log(0.011/0.002, 2)
b
a <- c(0.021, 0.275, 3.219, 39.102, 459.806, 5773.677)
b <- c(0.002, 0.021, 0.275, 3.219, 39.102, 459.806)
a/b
log(a/b, 2)
mean(log(a/b, 2))
a <- c(0.005, 0.029, 0.218, 1.576, 10.769, 75.497, 528.087, 3709)
b <- c(0.001,0.005, 0.029, 0.218, 1.576, 10.769, 75.497, 528.087)
a/b
log(a/b, 2)
mean(log(a/b, 2))
16+8+4+16+8+8*88+24
780/8
784/8
16+12+3+24+8+24+8*304
2519/8
315*8
a <- (0.023, 0.276, 2.915, 32.757, 358.502, 4024.007)
a <- c(0.023, 0.276, 2.915, 32.757, 358.502, 4024.007)
b <- c(0.002, 0.023, 0.276, 2.915, 32.757, 358.502)
mean(log(a/b, 2))
a <- c(0.002, 0.01, 0.043, 0.187, 0.844, 3.717, 16.573, 73.994, 328.626, 1464.096)
b <- c(0.001, 0.002, 0.01, 0.043, 0.187, 0.844, 3.717, 16.573, 73.994, 328.626)
mean(log(a/b, 2))
16+16+4+8+24+12+8*232
1936/8
a <- c(0.005, 0.023, 0.1, 0.447, 1.957, 8.67, 37.581, 165.334, 726.51, 3183.811)
b <- c(0.001, 0.005, 0.023, 0.1, 0.447, 1.957, 8.67, 37.581, 165.334, 726.51)
mean(log(a/b, 2))
16+24+11+12+8+240*8
1991/8
249*8
a <- c(0.003, 0.007, 0.019, 0.053, 0.147, 0.406, 1.122, 3.102, 8.571, 23.677, 65.45, 180.916, 500.012, 1381.903)
b <- c(0.001, 0.003, 0.007, 0.019, 0.053, 0.147, 0.406, 1.122, 3.102, 8.571, 23.677, 65.45, 180.916, 500.012)
a/b
log(a/b, 2)
meanlog(a/b, 2)
mean(log(a/b, 2))
2^8
2^18
2^19
2^13
n <- c(2^12, 2^13, 2^14, 2^15, 2^16, 2^17, 2^18, 2^19, 2^20, 2^21)
n
n <- c(2^12, 2^13, 2^14, 2^15, 2^16, 2^17, 2^18, 2^19, 2^20, 2^21, 2^22, 2^23, 2^24, 2^25, 2^26, 2^27, 2^28, 2^29, 2^30)
n <- c(2^12, 2^13, 2^14, 2^15, 2^16, 2^17, 2^18, 2^19, 2^20, 2^21, 2^22, 2^23, 2^24, 2^25, 2^26, 2^27, 2^28)
n
n^1.46
round(n^1.46)
formatC(n^1.46, format="f", digits=3)
16+32+2+8+8+24+4*200
890/8
112*8
a <- c(0.01, 0.047, 0.22, 1.036, 4.71, 22.649, 104.842, 495.961, 2325.290)
b <- c(0.002, 0.01, 0.047, 0.22, 1.036, 4.71, 22.649, 104.842, 495.961)
mean(log(a/b, 2))
16+3*8+4*8+3*4+8+24+208
324/8
41*8
a <- c(0.003, 0.014, 0.069, 0.357, 1.723, 8.446, 41.476, 203.798, 1002.222)
b <- c(0.001, 0.003, 0.014, 0.069, 0.357, 1.723, 8.446, 41.476, 203.798)
mean(log(a/b, 2))
16+3*8+4+2*8+8+24+48
140/8
18*8
16+8*3+8+4+8+24+8*256
2132/8
267*8
a <- c(0.003, 0.01, 0.036, 0.134, 0.501, 1.857, 6.845, 25.538, 94.358, 348.908, 1294.251)
b <- c(0.001, 0.003, 0.01, 0.036, 0.134, 0.501, 1.857, 6.845, 25.538, 94.358, 348.908)
mean(log(a/b, 2))
log(a/b, 2)
4.5*3+4*4+5*3.5+2*4.5+4+3*4.5+4*4.5+4*3+2*4+2*3
117.5/30
6*3.5+3*3.5+4*4+3*3+3*4+4*4+6*3.5+5
110.5/30
3.5+3.5+4+3+4+4+3.5+5
30.5/8
a <- 40000
a <- 4000
b <- 0.085
a*b
a <- a+340
1459.48/2000
(1459.48/2000)*7
(1459.48/2000)*10
(1459.48/2000)*9
63/2.89
a <- 40 90 80 60
a <- c(40 90 80 60)
a <- c(40, 90, 80, 60)
sum(a)
library(dplyr)
library(rCharts)
library(rvest)
setwd("YOUR WORKING DIRECTORY HERE")
heart <- function(r,x) {ifelse(abs(x)<2, ifelse(r%%2==0, sqrt(1-(abs(x)-1)^2), acos(1-abs(x))-pi), 0)} data.frame(x=seq(from=-3, to=3, length.out=100)) %>%
mutate(y=jitter(heart(row_number(), x), amount=.1)) -> df
love_songs <- html("http://www.cs.ubc.ca/~davet/music/list/Best13.html") love_songs %>%
html_nodes("table") %>%
.[[2]] %>%
html_table(header=TRUE, fill = TRUE) %>%
cbind(df) -> df
m1=mPlot(x = "x",  y = "y",  data = df,  type = "Line")
m1$set(pointSize = 5,
lineColors = c('red', 'red'),
width = 850,
height = 600,
lineWidth = 2,
hoverCallback = "#! function(index, options, content){
var row = options.data[index]
return '<b>' + row.ARTIST + '</b>' + '<br/>' + row.TITLE} !#",
grid=FALSE,
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/song visualisation.R')
getwd()
source('~/song visualisation.R')
library(dplyr)
library(rCharts)
library(rvest)
install.packages(c("dplyr", "rCharts", "rvest"))
setwd("~/RepData_PeerAssessment1")
library(ggplot2)
data <- read.csv("activity.csv")
data$date <- as.Date.factor(data$date)
data$date <- as.POSIXct(data$date)
#calculating steps per day
days <- aggregate(data$steps, list(data$date), sum)
#removing missing values
days <- na.omit(days)
#histogram for steps per day
hist <- ggplot(days,aes(x=Group.1 ,y=x, color=x))+geom_bar(stat='identity')+ylab("Steps taken")+xlab("Day")+theme(legend.position="none")
#mean and median of steps per day
mean <- mean(days$x)
median <- median(days$x)
#presenting results
hist
mean
median
intervals <- aggregate(data$steps, list(data$interval), sum, na.rm = T)
#plotting average daily activity
plot <- ggplot(intervals, aes(x=Group.1 ,y=x, color=x))+geom_line()+ylab("Steps taken")+xlab("Hour")+theme(legend.position="none")
#calculating interval with maximum number of steps taken on average
maximum <-intervals[intervals$x==max(intervals$x),]
#presenting results
plot
maximum
View(data)
View(data)
sum(data[data$steps==NA,])
sum(data$steps==NA)
data$steps==NA
sum(data$steps == NA)
summary(data)
sum(is.na(data$steps))
int <- aggregate(data$steps, list(data$interval), mean, na.rm = T)
View(int)
View(int)
data2 <- data
is.na(data2$steps)
data2$steps[is.na(data2$steps)]
head(data2$steps[is.na(data2$steps)==T])
head(data2[is.na(data2$steps),])
??subset
head(data2$steps[is.na(data2$steps)])
a <- is.na(data$steps)
numNA <- sum(a)
numNA
head(data2$steps[a])
head(data2$steps[a,])
head(data2$steps[a==T])
head(data2[a,])
head(data2[a,1])
data2[a, 1] <- int[which(data2$interval == int$Group1)]
data2[a, 1] <- int[which(data2$interval == int$Group1), 2]
data2 <- data
data2[a, 1] <- int[which(data2$interval == int$Group1), 2]
int[which(data2$interval == int$Group1), 2]
data2[a, 1] <- int[which(data2$interval == int$Group.1), 2]
int[data2$interval == int$Group.1, 2]
head(int[data2$interval == int$Group.1, 2])
tail(int)
data2[a, 1] <- int[data2$interval == int$Group.1, 2]
View(days)
View(days)
View(data2)
View(data2)
data2$steps[a & data2$interval == int$Group.1] <- int[, 2]
View(data2)
View(data2)
summary(data2)
intervals <- aggregate(data$steps, list(data$interval), sum, na.rm = T)
#plotting average daily activity
plot <- ggplot(intervals, aes(x=Group.1 ,y=x, color=x))+geom_line()+ylab("Steps taken")+xlab("Hour")+theme(legend.position="none")
#calculating interval with maximum number of steps taken on average
maximum <-intervals[intervals$x==max(intervals$x),]
#presenting results
plot
maximum
#calculating number of missing values
a <- is.na(data$steps)
numNA <- sum(a)
#calculating means for intervals
int <- aggregate(data$steps, list(data$interval), mean, na.rm = T)
#filling in missing data
data2 <- data
data2$steps[a & data2$interval == int$Group.1] <- int[, 2]
days2 <-aggregate(data2$steps, list(data2$interval), sum)
hist2 <- ggplot(days2,aes(x=Group.1 ,y=x, color=x))+geom_bar(stat='identity')+ylab("Steps taken")+xlab("Day")+theme(legend.position="none")
#mean and median of steps per day for new dataset
mean2 <- mean(days2$x)
median2 <- median(days2$x)
#presenting results for new dataset
hist2
mean2
median2
days2 <-aggregate(data2$steps, list(data2$date), sum)
hist2 <- ggplot(days2,aes(x=Group.1 ,y=x, color=x))+geom_bar(stat='identity')+ylab("Steps taken")+xlab("Day")+theme(legend.position="none")
#mean and median of steps per day for new dataset
mean2 <- mean(days2$x)
median2 <- median(days2$x)
#presenting results for new dataset
hist2
mean2
median2
median
head(weekdays(data$2$date))
head(weekdays(data2$date))
data2$day <- weekdays(data2$date)
View(data2)
tail(data2)
data2$day[== "sobota" | == "niedziela"]
head(data2$day[data2$day == "sobota" | data2$day == "niedziela"])
data2$day[data2$day == "sobota" | data2$day == "niedziela"] <- "weekend"
summary(data2)
summary(data2$day)
data2$day[data2$day != "sobota" | data2$day != "niedziela"] <- "weekday"
View(data2)
View(data2)
data2$day <- as.factor(weekdays(data2$date))
data2$day[data2$day == "sobota" | data2$day == "niedziela"] <- "weekend"
data2$day[data2$day != "sobota" | data2$day != "niedziela"] <- "weekday"
data2$day <- weekdays(data2$date)
data2$day[data2$day == "sobota" | data2$day == "niedziela"] <- "weekend"
data2$day[data2$day != "sobota" | data2$day != "niedziela"] <- "weekday"
data2$day <- as.factor(data2$day)
str(data2)
summary(data2)
data2$day <- weekdays(data2$date)
data2$day[data2$day == "sobota" | data2$day == "niedziela"] <- "weekend"
data2$day[data2$day != "weekend"] <- "weekday"
data2$day <- as.factor(data2$day)
summary(data2)
weekday <- aggregate(data2$steps[data2$day == "weekday"], list(data$interval), sum)
weekday <- aggregate(data2$steps[data2$day == "weekday"], list(data$interval[data2$day == "weekday"]), sum)
View(weekday)
View(weekday)
weekday <- aggregate(data2$steps[data2$day == "weekday"], list(data$interval[data2$day == "weekday"]), mean)
intervals <- aggregate(data$steps, list(data$interval), mean, na.rm = T)
data2$day <- weekdays(data2$date)
data2$day[data2$day == "sobota" | data2$day == "niedziela"] <- "weekend"
data2$day[data2$day != "weekend"] <- "weekday"
data2$day <- as.factor(data2$day)
#Plotting data for weekends and weekdays
weekday <- aggregate(data2$steps[data2$day == "weekday"], list(data$interval[data2$day == "weekday"]), mean)
weekend <- aggregate(data2$steps[data2$day == "weekend"], list(data$interval[data2$day == "weekend"]), mean)
par(mfrow=c(2,1))
ggplot(weekday, aes(x=Group.1 ,y=x, color=x))+geom_line()+ylab("Steps taken")+xlab("Hour")+theme(legend.position="none")
ggplot(weekend, aes(x=Group.1 ,y=x, color=x))+geom_line()+ylab("Steps taken")+xlab("Hour")+theme(legend.position="none")
weekday <- aggregate(data2$steps[data2$day == "weekday"], list(data$interval[data2$day == "weekday"]), mean)
weekend <- aggregate(data2$steps[data2$day == "weekend"], list(data$interval[data2$day == "weekend"]), mean)
weekdayPlot <- ggplot(weekday, aes(x=Group.1 ,y=x, color=x))+geom_line()+ylab("Steps taken")+xlab("Hour")+theme(legend.position="none")
weekendPlot <- ggplot(weekend, aes(x=Group.1 ,y=x, color=x))+geom_line()+ylab("Steps taken")+xlab("Hour")+theme(legend.position="none")
multiplot(weekdayPlot, weekendPlot)
??multiplot
install.packages("gridGraphics")
library("gridGraphics", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
multiplot(weekdayPlot, weekendPlot)
install.packages("grid")
install.packages("grid")
install.packages("grid")
??multiplot
??grid
install.packages("gridExtra")
library("gridExtra", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
weekday <- aggregate(data2$steps[data2$day == "weekday"], list(data$interval[data2$day == "weekday"]), mean)
weekend <- aggregate(data2$steps[data2$day == "weekend"], list(data$interval[data2$day == "weekend"]), mean)
weekdayPlot <- ggplot(weekday, aes(x=Group.1 ,y=x, color=x))+geom_line()+ylab("Steps taken")+xlab("Hour")+theme(legend.position="none")
weekendPlot <- ggplot(weekend, aes(x=Group.1 ,y=x, color=x))+geom_line()+ylab("Steps taken")+xlab("Hour")+theme(legend.position="none")
multiplot(weekdayPlot, weekendPlot)
grid.arrange(weekdayPlot, weekendPlot, ncol=2)
grid.arrange(weekdayPlot, weekendPlot, nrow=2)
